[[production]]
== Using Kibi in a Production Environment

How you deploy Kibi largely depends on your use case. If you are the only user,
you can run it on your local machine and configure it to point to whatever
Elasticsearch instance you want to interact with. Conversely, if you have a
large number of heavy users, you might need to load balance across multiple
instances that are all connected to the same Elasticsearch cluster.

While Kibi isn't terribly resource intensive, we still recommend running Kibi
separate from your Elasticsearch data or master nodes.

Make sure to set the configuration file as readable only to the user running
the Kibi process as it contains encryption keys to protect configuration
settings stored in Elasticsearch; if you are connecting Kibi to external
datasources, we also recommend to use credentials with no write privileges as
they are not required by the system.

[float]
[[access-control]]
=== Access control
Kibi is compatible with Elastic Shield and Search Guard to enable index level
access control; Kibi EE provides extended support for both products through
configurable error handling.

It is also possible to restrict access to Kibi and the Elasticsearch API by
putting them behind an authenticated SSL reverse proxy, however configuring the
proxy to HTTP methods based on the authenticated user can be very tricky and
prone to configuration errors.

For more information about the Enterprise Edition access control features
please see the <<access_control>> section.

[float]
[[load-balancing]]
=== Load Balancing Across Multiple Elasticsearch Nodes
If you have multiple nodes in your Elasticsearch cluster, the easiest way to distribute Kibana requests
across the nodes is to run an Elasticsearch _client_ node on the same machine as Kibana.
Elasticsearch client nodes are essentially smart load balancers that are part of the cluster. They
process incoming HTTP requests, redirect operations to the other nodes in the cluster as needed, and
gather and return the results. For more information, see
{elastic-ref}/modules-node.html[Node] in the Elasticsearch reference.

To use a local client node to load balance Kibana requests:

. Install Elasticsearch on the same machine as Kibana.
. Configure the node as a client node. In `elasticsearch.yml`, set both `node.data` and `node.master` to `false`:
+
--------
# 3. You want this node to be neither master nor data node, but
#    to act as a "search load balancer" (fetching data from nodes,
#    aggregating results, etc.)
#
node.master: false
node.data: false
--------
. Configure the client node to join your Elasticsearch cluster. In `elasticsearch.yml`, set the `cluster.name` to the
name of your cluster.
+
--------
cluster.name: "my_cluster"
--------
. Make sure Kibana is configured to point to your local client node. In `kibana.yml`, the `elasticsearch.url` should be set to
`localhost:9200`.
+
--------
# The Elasticsearch instance to use for all your queries.
elasticsearch.url: "http://localhost:9200"
--------
