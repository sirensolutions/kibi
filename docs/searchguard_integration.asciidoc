[[shield_integration]]

== Search Guard Integration [Enterprise Edition only]

ifeval::["{enterprise_enabled}" == "false"]
  NOTE: Documentation for Search Guard Integration is available only in Kibi
  Enterprise Edition.
endif::[]

ifeval::["{enterprise_enabled}" == "true"]

This section offers an overview of how to integrate Search Guard with Kibi; for
further reference and detailed options please consult the
{searchguard-ref}[Search Guard documentation].

=== SSL Certificates

All the Elasticsearch nodes in a cluster secured by Search Guard are required
to use SSL to encrypt all network traffic.

In addition, changing the Search Guard configuration requires the use
of a client SSL certificate to perform administrative actions.

To setup a Search Guard cluster, you will need to generate the following files:

- A **truststore** file, common to all nodes, containing the CA certificate
  chain.
- A **keystore** file, for each node, containing the certificate bundle for
  the node.
- A **keystore** file, for each administrative user, containing a certificate
  bundle that identifies the user.
- A **keystore** file containing a certificate bundle to identify the Kibi
  transport client.
- A **keystore** file containing an SSL certificate for the Elasticsearch HTTP
  REST API.

These files can be either Java KeyStore files or PKCS12 bundles, with the
exception of the certificate for the Kibi transport client which must be
a Java KeyStore file.

==== Sample certificates

The Kibi EE demo distribution includes the following sample certificates in the
_elasticsearch/config_ directory:

- **truststore.jks**: a sample CA certificate chain.
- **CN=localhost-keystore.jks**: a certificate for the bundled Elasticsearch
  node, used for both transport and REST API encryption.

In addition, the following certificates are included in the
_kibi/pki/searchguard_ directory:

- **CN=sgadmin-keystore.jks**: a certificate for the Search Guard administrative
  user.
- **truststore.jks**: a copy of the CA certificate chain truststore.
- **CN=demouser-keystore.jks**: a certificate for the _kibitransport_ user.
- **ca.pem**: the certificate chain in the truststore converted to PEM
  format.

The password for all keystores is `password`.

==== Issuing certificates in an existing PKI infrastructure

If your organization has a PKI infrastructure in place, you can generate
Java KeyStore files from a PEM bundle by using the _keytool_ command from
the Java runtime, e.g.:

[source,shell]
----
$ keytool  \
  -importcert \
  -file ca.pem  \
  -keystore truststore.jks
----

The command will store the contents of the PEM bundle _ca.pem_ into a file
named _truststore.jks_ in the current directory.

The same command can be used to convert certificates signed by your CA for
nodes, administrative users and the REST API.

Node certificates must include _oid:1.2.3.4.5.5_ as a Subject Alternative Name
entry to work correctly with Search Guard; if you want to enable hostname
verification, make sure that at least one Subject Alternative Name is equal to
the DNS name of the node.

Client certificates for administrative users must contain a unique
Distinguished Name to identify the user, e.g.:

----
CN=admin,DC=siren,DC=solutions
----

Certificates for the REST API can be shared across multiple nodes by setting
multiple hostnames in the Subject Alternative Name attribute or by using a
wildcard certificate.

==== Issuing certificates using the TLS certificate generator

Floragunn provides a TLS certificate generation service at
https://floragunn.com/tls-certificate-generator/ which can be used to create
a bundle of certificates for evaluation purposes.

To try the certificates in a single node setup, it is possible to just
specify **localhost** as the first hostname and submit the form.

The bundle has the following contents:

- **README.txt**: provides an overview of the bundle and the passwords for all
  the keystores.
- **truststore.jks**: the CA certificate chain in Keystore format.
- **node-certificates**: the transport certificates for the nodes in several formats;
  these certificates can also be used for the Elasticsearch REST API.
- **client-certificates**: client certificates.
- **root-ca**: the root CA bundle in PEM format.
- **signing-ca**: the signing CA bundle in PEM format.

=== Search Guard installation

Install the *search-guard-ssl* and *search-guard-2* plugins on every node the
Elasticsearch cluster by changing to the node directory and running the
commands below; to find the most recent version of the plugins for your
Elasticsearch version please consult the
{searchguard-matrix-ref}[Search Guard version matrix].

[source,shell]
----
$ bin/plugin install -b com.floragunn/search-guard-ssl/<version>
$ bin/plugin install -b com.floragunn/search-guard-2/<version>
----

Then, copy the following files to the _config_ directory of each node:

- The truststore file (e.g. _truststore.jks_).
- The keystore file containing the node certificate (e.g.
  _CN=localhost-keystore.jks_)
- The keystore file containing the certificate for the Elasticsearch REST API
  if different than the node certificate.

Open the _config/elasticsearch.yml_ file and set the following Search Guard
options:

**Node to node transport options:**

- **searchguard.ssl.transport.enabled**: needs to be set to **true** for Search
  Guard to work.
- **searchguard.ssl.transport.keystore_filepath**: the filename of the keystore
  file that contains the node certificate.
- **searchguard.ssl.transport.keystore_password**: the password of the keystore
  file that contains the node certificate.
- **searchguard.ssl.transport.truststore**: the filename of the truststore file
  that contains the root certificate chain.
- **searchguard.ssl.transport.truststore_password**: the password of the
  truststore file that contains the root certificate chain.
- **searchguard.ssl.transport.enforce_hostname_verification**: set to **true**
  to enable hostname verification, **false** otherwise.

**REST API options:**

- **searchguard.ssl.http.enabled**: set to **true** to enable SSL on the HTTP
  interface.
- **searchguard.ssl.http.keystore_filepath**: the filename of the keystore
  file that contains the certificate for the HTTP interface.
- **searchguard.ssl.http.keystore_password**: the password of the keystore
  file that contains the certificate for the HTTP interface.
- **searchguard.ssl.http.truststore**: the filename of the truststore file
  that contains the root certificate chain for the HTTP certificate.
- **searchguard.ssl.http.truststore_password**: the password of the truststore file
  that contains the root certificate chain for the HTTP certificate.

**Administrative user options:**

- **searchguard.authcz.admin_dn**: a list of Distinguished Names in SSL client
  certificates which are authorized to submit administrative requests.

E.g.:

[source,yaml]
----
searchguard.ssl.transport.enabled: true
searchguard.ssl.transport.truststore_filepath: truststore.jks
searchguard.ssl.transport.truststore_password: password
searchguard.ssl.transport.keystore_filepath: CN=localhost-keystore.jks
searchguard.ssl.transport.keystore_password: password
searchguard.ssl.transport.enforce_hostname_verification: false
searchguard.ssl.http.enabled: true
searchguard.ssl.http.keystore_filepath: CN=localhost-keystore.jks
searchguard.ssl.http.keystore_password: password
searchguard.ssl.http.truststore_filepath: truststore.jks
searchguard.ssl.http.truststore_password: password
searchguard.authcz.admin_dn:
  - CN=sgadmin
----

NOTE: Make sure that all the files in the configuration directory and the
certificate files are readable only by the user running Elasticsearch.

Start Elasticsearch:

[source,shell]
----
$ bin/elasticsearch
----

If either a certificate or a password is incorrect, Elasticsearch will not
start.

=== Access control configuration

Access control configuration (users, roles and privileges) is stored in an
Elasticsearch index which can be modified through the _sgadmin.sh_ script.

The script reads the configuration from a local directory containing YAML files
and uploads it to the index; the request is authenticated through a client SSL
certificate.

Once the configuration has been uploaded, it will be available to all the nodes
in the cluster, so it is not necessary to copy the Search Guard configuration
directory to all the Elasticsearch nodes, just on the node from where sgadmin
is run.

`sgadmin.sh` is available in the _plugins/search-guard-2/tools_ directory in
each Elasticsearch instance in which Search Guard has been installed; a
standalone version (`sgadmin-standalone.zip`) can be downloaded from
{searchguard-sgadmin-ref}[this page].

Once a Search Guard enabled cluster has been initialized, `sgadmin` can be used
to upload new configurations.

NOTE: if you are using the {searchguard-management-api-ref}[Search Guard REST
Management API addon], make sure that the sgadmin configuration directory
contains only the `sg_config.yml` file, otherwise sgadmin will replace users,
roles, action groups and mappings that might have been modified through the
API.

==== Search Guard configuration

A Search Guard configuration directory contains the following files:

- **sg_config.yml**: contains the general configuration.
- **sg_action_groups.yml**: contains named groups of permissions.
- **sg_roles.yml**: contains the definition of roles.
- **sg_internal_users.yml**: the Search Guard internal users database.
- **sg_roles_mapping.yml**: contains the mapping between users and roles.

A sample configuration is available in the _config/sgconfig_ directory in the
Elasticsearch instance included in the demo distribution; the contents of the
files are explained in the next sections and can be used as a general
guideline.

For additional configuration options please refer to the official
{searchguard-ref}[Search Guard documentation].

**General configuration (sg_config.yml)**

[source,yaml]
----
searchguard:
  dynamic:
    http:
      anonymous_auth_enabled: false
      xff:
        enabled: false
    authc:
      transport_auth_domain:
        enabled: true
        order: 2
        http_authenticator:
          type: basic
        authentication_backend:
          type: internal
      basic_internal_auth_domain:
        enabled: true
        http_authenticator:
          type: basic
          challenge: true
        authentication_backend:
          type: intern
----

The _sg_config.yml_ file contains the configuration of the authentication
mechanisms and backends; the above configuration:

- Disables the anonymous role (_anonymous_auth_enabled: false_)
- Disables support for external proxies (_xff.enabled: false_)
- Enables HTTP basic authentication on the internal Search Guard user database.

**Action groups (sg_action_groups.yml)**

[source,yaml]
----
ALL:
  - "indices:*"
MANAGE:
  - "indices:monitor/*"
  - "indices:admin/*"
CREATE_INDEX:
  - "indices:admin/create"
MANAGE_ALIASES:
  - "indices:admin/aliases*"
MONITOR:
  - "indices:monitor/*"
DATA_ACCESS:
  - "indices:data/*"
WRITE:
  - "indices:data/write*"
READ:
  - "indices:data/read*"
DELETE:
  - "indices:data/write/delete*"
CRUD:
  - READ
  - WRITE
SEARCH:
  - "indices:data/read/search*"
  - "indices:data/read/msearch*"
  - SUGGEST
SUGGEST:
  - "indices:data/read/suggest*"
INDEX:
  - "indices:data/write/index*"
  - "indices:data/write/update*"
GET:
  - "indices:data/read/get*"
  - "indices:data/read/mget*"

# CLUSTER
CLUSTER_ALL:
  - cluster:*
CLUSTER_MONITOR:
  - cluster:monitor/*

KIBI_CLUSTER:
  - indices:data/read/scroll
  - cluster:admin/plugin/siren/license/get

KIBI_MSEARCH:
  - indices:data/read/coordinate-msearch*
  - indices:data/read/msearch*

KIBI_READONLY:
  - indices:data/read/field_stats*
  - indices:data/read/get*
  - indices:data/read/mget*
  - indices:data/read/search*
  - indices:data/read/coordinate-search*
  - indices:admin/mappings/get*
  - indices:admin/mappings/fields/get*
  - indices:admin/validate/query*
  - indices:admin/get*
  - indices:admin/version/get*
  - KIBI_MSEARCH

KIBI_READWRITE:
  - indices:admin/exists*
  - indices:admin/mapping/put*
  - indices:admin/refresh*
  - indices:data/write/delete*
  - indices:data/write/index*
  - indices:data/write/update*
  - KIBI_READONLY
----

This file contains named groups of permissions which can be used in the roles
configuration file; the above configuration includes Search Guard default
groups plus three Kibi specific groups:

- **KIBI_READWRITE**: groups all the permissions needed to search and update
  the main Kibi index (_.kibi_); the group has to be assigned on the main index
  to all roles that can modify the Kibi configuration.
- **KIBI_READONLY**: groups all the permissions needed to search any
  Elasticsearch index from Kibi. The group has to be assigned on all indices
  that a role has access to.
- **KIBI_MSEARCH**: groups all the permissions to execute msearch requests; the
  group has to be assigned on all indices to roles that have access only to a
  subset of indices.
- **KIBI_CLUSTER**: sets the permission to read results from scrolling
  searches.

**Roles (sg_roles.yml)**

[source,yaml]
----
# Allows any action on the cluster.
sg_all_access:
  cluster:
    - '*'
  indices:
    '*':
      '*':
        - '*'

# Allows reading data from all indices.
sg_readall:
  indices:
    '*':
      '*':
        - READ

# Permissions for a Logstash client.
logstash:
  cluster:
    - indices:admin/template/get
    - indices:admin/template/put
  indices:
    'logstash-*':
      '*':
        - CRUD
        - CREATE_INDEX
    '*beat*':
      '*':
        - CRUD
        - CREATE_INDEX

# Permissions for a Marvel agent.
marvel:
  cluster:
    - indices:admin/template/get
    - indices:admin/template/put
  indices:
    '?marvel*':
      '*':
        - ALL

# Permissions for a Sentinl user.
sentinl:
  cluster:
    - KIBI_CLUSTER
  indices:
    '*':
      '*':
        - KIBI_READONLY
    'watcher_alarms*':
      '*':
        - KIBI_READWRITE
        - indices:admin/template/get
        - indices:admin/template/put
        - CREATE_INDEX
    '/(watcher|watcher_alarms)/':
      '*':
        - KIBI_READWRITE
        - indices:admin/template/get
        - indices:admin/template/put
        - CREATE_INDEX

# Permissions for the Kibi transport client.
kibitransport:
  cluster:
      - cluster:monitor/nodes/liveness

# Permissions for the Kibi server process.
kibiserver:
  cluster:
      - cluster:monitor/nodes/info
      - cluster:monitor/health
      - cluster:monitor/state
      - cluster:monitor/nodes/stats
      - KIBI_CLUSTER
  indices:
    '*':
      '*':
        - indices:admin/get
    '?kibi':
      '*':
        - ALL

# Permissions for a Kibi administrator (read-write access to the .kibi index).
kibiadmin:
  cluster:
    - KIBI_CLUSTER
    - cluster:admin/plugin/siren/license/put
  indices:
    '*':
      '*':
        - KIBI_READONLY
    '?kibi':
      '*':
        - KIBI_READWRITE
    'watcher':
      '*':
        - KIBI_READWRITE

# Permissions for a Kibi user (read only access to the .kibi index).
kibiuser:
  cluster:
    - KIBI_CLUSTER
  indices:
    '?kibi':
      '*':
        - KIBI_READONLY
    'watcher':
      '*':
        - KIBI_READONLY
    'watcher_alarms*':
      '*':
        - KIBI_READONLY
    '/(article|investment|company|investor)/':
      '*':
        - KIBI_READONLY
    '*':
      '*':
        - KIBI_MSEARCH

# Permissions for a Kibi user (read only), with no access to the investor index.
kibinoinvestor:
  cluster:
    - KIBI_CLUSTER
  indices:
    '?kibi':
      '*':
        - KIBI_READONLY
    '/(article|company|investment)/':
      '*':
        - KIBI_READONLY
    '*':
      '*':
        - KIBI_MSEARCH
----

The file defines the following roles:

- **sg_all_access**: allows every action on the cluster.
- **sg_readall**: allows to search data on all the indices in the cluster.
- **logstash**: defines the permission for a Logstash client with all write and
  creation privileges enabled on Logstash and Elastic Beats templates and
  indices.
- **sentinl**: defines the permission for a Sentinl user; the role is
  not required if the Sentinl plugin is not installed.
- **marvel**: defines the permissions for a Marvel agent.
- **kibitransport**: defines the permissions for the Kibi transport client.
- **kibiserver**: defines the permissions for the Kibi server process.
- **kibiadmin**: defines the permissions for a Kibi user with read/write
  access to the .kibi index.
- **kibiuser**: defines the permissions for a Kibi user with readonly access
  to all indices.
- **kibinoinvestor**: defines the permissions for a Kibi user with readonly
  access to all the indices excluding _investor_.

A permission is defined by the following syntax:

[source,yaml]
----
<username>:
  <indices or cluster>:
    '<index name or regular expression>':
      '<type name or regular expression>':
        - <list of permissions or action group names>
----

The index name can contain the simple expansion characters _*_ and _?_ to match
any sequence of character/any single character; for further information about
defining permissions, please refer to the
{searchguard-ref}/blob/master/configuration.md[Search Guard configuration
documentation].

**Users (sg_internal_users.yml)**

[source,yaml]
----
# Internal user database
# The hash value is a bcrypt hash and can be generated with plugins/searchguard-2/tools/hash.sh
admin:
  hash: $2a$12$zMeFc6Xi.pcgDVHsvtCV9ePNteVwTE5uGxcKdf7XQcKB9.VkD8iOy
kibiserver:
  hash: $2a$12$zMeFc6Xi.pcgDVHsvtCV9ePNteVwTE5uGxcKdf7XQcKB9.VkD8iOy
kibiadmin:
  hash: $2a$12$zMeFc6Xi.pcgDVHsvtCV9ePNteVwTE5uGxcKdf7XQcKB9.VkD8iOy
kibiuser:
  hash: $2a$12$zMeFc6Xi.pcgDVHsvtCV9ePNteVwTE5uGxcKdf7XQcKB9.VkD8iOy
kibinoinvestor:
  hash: $2a$12$zMeFc6Xi.pcgDVHsvtCV9ePNteVwTE5uGxcKdf7XQcKB9.VkD8iOy
logstash:
  hash: $2a$12$zMeFc6Xi.pcgDVHsvtCV9ePNteVwTE5uGxcKdf7XQcKB9.VkD8iOy
CN=demouser:
  hash: $2a$12$zMeFc6Xi.pcgDVHsvtCV9ePNteVwTE5uGxcKdf7XQcKB9.VkD8iOy
sentinl:
  hash: $2a$12$zMeFc6Xi.pcgDVHsvtCV9ePNteVwTE5uGxcKdf7XQcKB9.VkD8iOy
marvel:
  hash: $2a$12$zMeFc6Xi.pcgDVHsvtCV9ePNteVwTE5uGxcKdf7XQcKB9.VkD8iOy
----

The file defines the credentials for Search Guard internal users; passwords are
stored as hashes in the _hash_ attribute beneath each username.

The password for all the accounts above is _password_.

To change the password of a user, you will need to generate the corresponding
hash; this can be done by executing the _plugins/search-guard-2/tools/hash.sh_
script as follows:

[source,bash]
----
$ bash plugins/search-guard-2/tools/hash.sh -p password
----

The script will output the hash for the password specified after the _-p_
switch.

**Role mappings (sg_roles_mapping.yml)**

[source,yaml]
----
sg_all_access:
  users:
    - admin

kibiserver:
  users:
    - kibiserver

kibiadmin:
  users:
    - kibiadmin

kibiuser:
  users:
    - kibiuser

kibinoinvestor:
  users:
    - kibinoinvestor

kibitransport:
  users:
    - 'CN=demouser'

logstash:
  users:
    - logstash

sentinl:
  users:
    - sentinl

marvel:
  users:
    - marvel
----

The file defines the assignment of roles to users; users authenticating through
a client certificate are identified by the Distinguished Name in the certificate.

===== Uploading the configuration to the cluster

To upload the configuration defined in the previous steps, go to the
Elasticsearch directory and execute the
_plugins/search-guard-2/tools/sgadmin.sh_ script as follows:

[source,bash]
----
$ bash plugins/search-guard-2/tools/sgadmin.sh \
  -cd config/sgconfig \
  -cn kibi-distribution \
  -ts config/truststore.jks \
  -tspass password \
  -ks ../kibi/pki/searchguard/CN\=sgadmin-keystore.jks \
  -kspass password \
  -h localhost \
  -p 9330 \
  -nhnv
----

You will need to specify the following arguments based on your enviroment
configuration:

- **-cd**: the path to the directory containing the Search Guard access control
  configuration.
- **-cn**: the name of the Elasticsearch cluster.
- **-ts**: the path to the truststore file.
- **-tspass**: the password of the truststore file.
- **-ks**: the path to the administrative client certificate keystore.
- **-kspass**: the password of the client certificate keystore file.
- **-h**: the hostname of a node in the cluster.
- **-p**: the transport port of the node specified in the **-h** option.
- **-nhnv**: disables host name verification; remove this option if you installed
  node certificates with the correct hostname (recommended in production).

By default the number of replicas for the `searchguard` index will be set at
creation time to the number of data nodes - 1.

For additional information on how to set replication settings and sgadmin in
general please refer to the {searchguard-ref}/blob/master/sgadmin.md[sgadmin
documentation].

If the command executes successfully it will print a summary of the actions
executed, e.g.:

----
Clustername: elasticsearch
Clusterstate: YELLOW
Number of nodes: 1
Number of data nodes: 1
searchguard index does not exists, attempt to create it ... done
Populate config from /elasticsearch/sg_config
Will update 'config' with sg_config/sg_config.yml
   SUCC: Configuration for 'config' created or updated
Will update 'roles' with sg_config/sg_roles.yml
   SUCC: Configuration for 'roles' created or updated
Will update 'rolesmapping' with sg_config/sg_roles_mapping.yml
   SUCC: Configuration for 'rolesmapping' created or updated
Will update 'internalusers' with sg_config/sg_internal_users.yml
   SUCC: Configuration for 'internalusers' created or updated
Will update 'actiongroups' with sg_config/sg_action_groups.yml
   SUCC: Configuration for 'actiongroups' created or updated
Done with success
----

You can then verify that SSL and authentication are enabled by making an
authenticated request with wget, e.g.:

[source,shell]
----
$ wget --ca-certificate=../kibi/pki/searchguard/ca.pem --http-user=kibiserver --http-password=password -qO - https://localhost:9220
----

To display information about the certificate as seen by a client you can
execute the following command:

[source,shell]
----
$ echo | openssl s_client -servername localhost -connect localhost:9220 -showcerts | openssl x509 -text -inform pem -text -noout
----

=== Kibi configuration

Edit _config/kibi.yml_ and specify the credentials of the **kibiserver**
user, e.g.:

[source,yaml]
----
elasticsearch.username: "kibiserver"
elasticsearch.password: "password"
----

If HTTPS is enabled for the Elasticsearch REST API, make sure that the
_elasticsearch.url_ setting contains a URL starting with _https_, e.g.:

[source,yaml]
----
elasticsearch.url: "https://localhost:9220"
----

If the certificate is not signed by a public authority, you will also need to
set the `elasticsearch.ssl.ca` to the path of the CA chain bundle in PEM
format, e.g.:

[source,yaml]
----
elasticsearch.ssl.ca: "pki/searchguard/ca.pem"
----

If you're using the certificates generated by the TLS generator service, the
PEM file containing the certification bundles is available in
**root-ca/root-ca.pem**.

To enable certificate verification, set _elasticsearch.ssl.verify_ to true,
e.g.:

[source,yaml]
----
elasticsearch.ssl.verify: true
----

Set the **kibi_core.elasticsearch.auth_plugin** option to **searchguard**:

----
kibi_core:
  elasticsearch:
    auth_plugin: "searchguard"
----

Then, specify the the following configuration values for the Kibi transport
client in the **kibi_core.elasticsearch.transport_client.ssl** section:

- **ca**: the path to the Search Guard truststore file.
- **ca_password**: the password of the Search Guard truststore file.
- **ca_alias**: the alias of the CA certificate in the Search Guard truststore
  file.
- **key_store**: the path to the transport client certificate keystore.
- **key_store_password**: the password of the transport client certificate
  keystore.
- **key_store_alias**: the alias of the kibitransport client certificate in the
  keystore.
- **verify_hostname**: set to **false** to disable SSL hostname verification.
  Defaults to **true**.
- **verify_hostname_resolve**: if set to **true** the transport client will
  resolve Elasticsearch node names using DNS when performing host name
  verification.  Defaults to **false**.

E.g.:

[source,yaml]
----
kibi_core:
  elasticsearch:
    auth_plugin: "searchguard"
    transport_client:
      ssl:
        ca: "pki/searchguard/truststore.jks"
        ca_password: "password"
        key_store: "pki/searchguard/CN=demouser-keystore.jks"
        key_store_password: "password"
        verify_hostname: true
----

To enable the Kibi access control plugin, specify the following configuration
values in the **kibi_access_control** section:

- **enabled**: set to **true** to enable the Kibi access control plugin.
  Defaults to **false**.
- **session.ttl**: the lifetime of the session in milliseconds.
  If not set, the session will last as long as the session cookie is valid.
  Defaults to **3600000** (1 hour).
- **session.keepAlive**: if set to **true**, every time a request is
  received within the session lifetime, the session lifetime will be
  extended by **session.ttl**.  Defaults to **true**.
- **cookie.password**: a 32 characters long password used to derive
  the key used to encrypt and sign cookies.
- **cookie.secure**: if set to **true**, the cookie will be transmitted
  only if the request is being served over HTTPS. It is possible to set this
  to false if Kibi is behind an SSL proxy. Defaults to **true**.
- **cookie.ttl**: the lifetime of the session cookie in milliseconds.  If not
  set, the cookie will expire when the browser is closed, which is the
  recommended setting. Please note that browsers might not remove session
  cookies when a tab is closed or even across restarts, so it is recommended to
  set **session.ttl** for additional protection. Defaults to **null**.
- **cookie.name**: the name of the session cookie. Defaults to **kac**.

E.g.:

[source,yaml]
----
kibi_access_control:
  enabled: true
  cookie:
    password: "12345678123456781234567812345678"
----

If Kibi is running behind a reverse SSL proxy like Nginx, remember to set
**cookie.secure** to **false** otherwise the cookie will not be sent, e.g.:

[source,yaml]
----
kibi_access_control:
  enabled: true
  cookie:
    password: "12345678123456781234567812345678"
    secure: false
----

If you are using the Sentinl plugin, you can specify the Sentinl user
credentials in the `kibi_access_control.sentinl` section, e.g.:

[source,yaml]
----
kibi_access_control:
  sentinl:
    elasticsearch:
      username: sentinl
      password: password
----

Restart Kibi after changing the configuration file; if the configuration is
correct, you should see an authentication dialog when browsing to Kibi.

._Authentication dialog_
image::images/access_control/login.png["Authentication dialog",align="center"]

=== Logstash configuration

To enable authentication in Logstash, set the following parameters in the
**output.elasticsearch** section:

- **user**: the username of the user having the logstash role.
- **password**: the password of the user having the logstash role.
- **ssl**: set to true to enable SSL.
- **truststore**: the path to the CA truststore file.
- **truststore_password**: the password of the CA truststore file.

E.g.:

[source]
----
output {
    elasticsearch {
       hosts => ["localhost:9220"]
       user => logstash
       password => password
       ssl => true
       truststore => "/etc/pki/logstash/truststore.jks"
       truststore_password => password
    }
}
----

The truststore file must be copied on all nodes running Logstash.

=== Beats configuration

To enable authentication in a beat which connects directly to Elasticsearch,
set the following parameters in the **output.elasticsearch** section:

- **protocol**: set to _https_.
- **username**: the username of the user having the logstash role.
- **password**: the password of the user having the logstash role.
- **tls.certificate_authorities**: an array containing the path to the CA
  truststore file in PEM format.

E.g.:

[source,yaml]
----
output:

  elasticsearch:
    hosts: ["localhost:9220"]

    protocol: "https"
    username: "logstash"
    password: "password"

    tls:
      certificate_authorities: ["/etc/pki/filebeat/ca.pem"]
----

The root certification authority in PEM format must be copied to all nodes
running one or more beats.

=== Sense configuration

In order to successfully submit queries from Sense to a cluster secured by
Search Guard set the following parameters in `config/kibi.yml`:

[source,yaml]
----
sense.proxyConfig:
  - match:
      protocol: "https"

    ssl:
      ca: "pki/searchguard/ca.pem"
----

`sense.proxyConfig.ssl.ca` must point to the CA certificate bundle, so it can
be set to the same value as the `elasticsearch.ssl.ca` parameter.

For more details about proxy options please refer to the
{sense-ref}/installing.html[Sense documentation].

=== Marvel configuration

In order to store Marvel data in a cluster secured by Search Guard it is
required to configure agent exporters to submit data over an authenticated
HTTPS connection.

The exporter configuration in `elasticsearch.yml` must include the following
parameters:

- `type`: `http`.
- `host`: an array of URLs that will be contacted by the exporter.
- `auth.username`: the username of the Marvel agent user.
- `auth.password`: the password of the Marvel agent user.
- `ssl.truststore.path`: the path to the CA certificate truststore (this will
  usually be the same as the one specified in the Search Guard configuration).
- `ssl.truststore.password`: the password of the CA certificate truststore.

For example, the following configuration defines an exporters which sends data
to the cluster at `https://localhost:9220`, authenticating as the `marvel`
user:

[source,yaml]
----
marvel.agent.exporters:
  id1:
    type: http
    host: ["https://localhost:9220"]

    auth:
      username: marvel
      password: password

    ssl:
      truststore.path: truststore.jks
      truststore.password: password
----

For more information about agent configuration options please refer to
{shield-ref}/marvel.html[Using Marvel with Shield].

endif::[]
