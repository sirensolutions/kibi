[[relational-browsing]]
== Kibi Relational Browsing

Kibi adds a relational dimension to Kibana when browsing indices,
allowing to _filter_ documents on a dashboard by showing only those that have
a relation with documents displayed in a different dashboard, possibly stored
in different indices.

There are two paradigms a user can follow:

1. through the <<relational-panel>>, a user picks a set of dashboards to join: filtering documents within a dashboard **automatically** updates the other related dashboards; and
2. through the <<relational_filter>>, a user _builds_ interactivelly the sequence of dashboards to join.

[[relational-panel]]
=== Relational Panel

With the relational panel browsing paradigm, all the dashboards of interest are join together. Effectivelly, documents that can be viewed in each dashboard are those that are connected with the rest.

For example, consider two dashboards Articles and Companies which documents are related to one another; if one filters articles by their publishing date to a certain range, then only the companies that are mentioned in articles published within that range are displayed.

==== Configuration

In order to use this browsing paradigm, it is necessary to configure the <<kibi-settings-relations,relationships>>.

Once this is done, you can view which dashboards are connected to each other using the relational panel by clicking on the icon image:images/relations_settings/relational_panel_icon.png["Relational panel icon"] in the Dashboard tab.
In the image below, the dashboards Articles, Companies, and Investments are connected together.

image::images/relational_panel/panel.png["Relational panel",align="center"]

[[relational-panel-browsing]]
==== Browsing

Since a <<saving-dashboards,saved search>> is now associated with a dashboard, a count indicating the current number of documents in that dashboard is displayed on each tab. For example on the previous image, there are 151714 articles, 6419 companies, and 13231 investments rounds that are inter-connected. These numbers coupled with the relational panel allows to get a feeling of the current state of the joined dashboards.
The current set of connected dashboards are displayed in the label of the blue filter image:images/relational_panel/filter.png["relational panel filter"].

Since all the dashboards in the set are connected to each other, adding a filter to a dashboard will also update the connected dashboards. If you select **TechCrunch** as the source for articles, there are now in total 27772 articles. Being automatically updated, we observe that only 3748 companies (out of 6419) and 8136 investments (out of 13231) are actually connected to those articles from TechCrunch.

image::images/relational_panel/with_filter.png["Relational panel with a filter",align="center"]

You can see the current filters that are applied with the relational panel by hovering the mouse over the blue filter.
The explanation tooltip shown below indicates that the current 311 companies are connected with:

- articles coming from TechCrunch published within a specific time range; and
- investments funded within another time range.

image::images/relational_panel/explanation.png["Explanation of the relational filter",align="center"]

[[relational_filter]]
=== Relational filter

The relational filter visualization allows to "pivot" from a dashboard
to another by creating a join between multiple indices based on their
relations. This allows to interactivelly build the sequence of dashboards to join.

The relational filter visualzation is configured based on the <<kibi-settings-relation,relationships>> between indices defined in the settings tab.
For example, let's take the following indices:

[horizontal]
_article_:: an index containing articles; each document in the index has a field called `companies` which is an array that contains the ID of companies mentioned in the article. This index is displayed on the dashboard entitled `Articles`.
_company_:: an index containing information about companies; each document in the index has a field called `id` that contains the ID of the company. This index is displayed on the dashboard entitled `Companies`.

Both indices are <<kibi-settings-relation,configured>> so that they are joined on the field `companies` of `article` with the the field `id` of `company`. Then, it is possible to use that configuration in order to create a relational filter that would filter companies based on connected articles (or vice-versa).

In the _Articles_ dashboard, the relational filter visualization is displayed as a button which indicates the number of documents in the _Companies_ dashboard that are mentioned in the articles of the current dashboard.

The screenshot below shows the button for the relation described in the example; there are 18237 companies mentioned in the 618155 articles currently displayed:

image::images/relational_filter/relational_filter_companies_source.png["Relational filter button on the Articles dashboard",align="center", width="400"]

Clicking on the button will switch you to the _Companies_ dashboard and display the 18237 companies; the relational filter is displayed in the filter bar, as displayed below:

image::images/relational_filter/relational_filter_companies_target.png["Relational filter on the Companies dashboard",align="center", width="400"]

The relational filter visualization requires the {siren-join-website}[Siren Join plugin {siren-join-version}] for
Elasticsearch. The plugin is compatible with Elasticsearch {elasticsearch-version}.

For more information about the Siren Join plugin visit our website at https://siren.solutions/searchplugins/join/.

[float]
[[relational_filter_config]]
==== Configuration

Click on the _Add filter_ button to create a new filter in the visualization;
the filter is defined by the following parameters:

* _Button label_: the label of the button that will be displayed inside the visualization, e.g. `Companies -->`.
* _Custom filter label_: the label of the filter that will be displayed in the filter bar, which by default is `... related to ($COUNT) from $DASHBOARD.`. Several variables are available for customizing the label:
** $COUNT is a number of items on source dashboard,
** $DASHBOARD is a source dashboard name.
* _Source dashboard_: optional parameter that indicates on which dashboard the relational filter should appear in.
* _Target dashboard_: the dashboard to join the current dashboard with. The current dashboard is equal to the previous field if set.
* _Relation_: the label of the relation between indices to use for this relational filter. This is set in the <<kibi-settings-relation,relations>> settings tab.

The screenshot below shows the configuration of a relation from the `Articles` dashboard to the `Companies` dashboard, using the `mentions` relation:

image::images/relational_filter/relational_filter_config.png["Relational filter configuration",align="center"]

It is possible to define multiple relations in a single Kibi relational
filter visualization; the visualization will display only buttons applicable
to the currently displayed dashboard.

[float]
[[relational_filter_usage]]
==== Usage

When clicking on a button in the relational filter visualization,
the current state of the source dashboard is added to the relational filter
and applied to the target dashboard.
Just move the mouse over relational filter to see an explanation of what is being joined.

[float]
===== Walkthrough example

We start on the **Articles** dashboard, search for `pizza` and click on the relational filter to switch to the **Companies** dashboard.

image::images/relational_filter/example_1.png["Relational filter explanation",align="center"]

Hovering over the blue filter displays an explanation. It indicates that the relational filter involves only one join, i.e., the one from `Articles` to `Companies` with `pizza` filtering the articles.

image::images/relational_filter/example_2.png["Relational filter explanation",align="center"]

Next, we add a regular filter to the `Companies` dashboard by clicking on the `USA` row of the `Companies by Country` visualization.

image::images/relational_filter/example_3.png["Relational filter explanation",align="center"]

Now, we click on the `Investment rounds -->` button which takes us to the `Investment rounds` dashboard.
The explanation on that filter shows that the investment rounds are filtered as follows:

- the current investments rounds are joined with companies from the USA; and
- those companies are joined with articles which match the term `pizza`.

image::images/relational_filter/example_4.png["Relational filter explanation",align="center"]

NOTE: The sequence of the joins in the explanation are shown in reverse, i.e., the last join is on top.

[float]
[[relational-filter_viewing-detailed-information]]
==== Viewing Detailed Information

To display the raw data behind the visualization, click the bar at the bottom of the container. Tabs with detailed
information about the raw data replace the visualization, as in this example:

image::images/relational_filter/spy.png["Spy panel of the relational filter visualization",align="center"]

This panel provides two kinds data: information about the query behind the relational filter in the `Multi Search` tab, and details about the visualization object in the `Debug` tab.

[float]
===== Multi Search

This pane presents information about the {elastic-ref}search-multi-search.html[msearch] request executed to perform the joins. A relational filter corresponds to one query of the msearch.

On the top, the time reported in `Multi search request duration` informs on how long the msearch request took. There is also additional information about each query of the msearch:

- _Query Duration_: The time spent for this particular query.
- _Hits_: the total number of documents resulting from the query.
- _Index_: the index pattern used to execute the query.
- _Type_: the type of the indices matched by the index pattern.

For a particular relational filter, you can get additional information about the query that got executed.

.Filterjoin
This displays a table that provides several statistics about each join.

image::images/relational_filter/spy_filterjoin.png["Details about the filterjoin query",align="center"]

.Raw Request
The filterjoin query as sent by Kibi. This uses the internal API for defining the join.

.Translated Request
The filterjoin query as sent to the Elasticsearch cluster, presented in JSON format.

.Response
The raw response from the server, presented in JSON format.

[float]
===== Debug

The Debug tab presents the JSON object that Kibi uses for this relational filter.

image::images/relational_filter/spy_debug.png["Debug spy panel of the relational filter visualization",align="center"]
