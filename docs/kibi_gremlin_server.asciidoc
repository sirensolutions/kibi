[[kibi_gremlin_server]]
== Kibi Gremlin Server [Enterprise Edition only]

ifeval::["{enterprise_enabled}" == "false"]
  NOTE: Documentation for Kibi Gremlin Server is available only in Kibi Enterprise Edition.
endif::[]

ifeval::["{enterprise_enabled}" == "true"]

**Kibi Gremlin Server** component required by <<graph_browser,Kibi Graph Browser>> visualisation
is shipped pre-configured in Kibi Enterprise Edition.

The following Gremlin Server configuration is required in kibi.yml.

=== Configuration:

```yml
kibi_core:
  gremlin_server:
    url: http://127.0.0.1:8061
    path: /opt/gremlin_server/gremlin-es2-server-0.1.0.jar
```

=== Configuration with Shield:

```yml
kibi_core:
  elasticsearch:
    transport_client:
      username: 'transport_client'
      password: 'password'
  gremlin_server:
    url: https://127.0.0.1:8061
    path: /opt/gremlin_server/gremlin-es2-server-0.1.0.jar
    # SSL configuration is mandatory when using shield
    ssl:
      key_store: '/opt/ca/gremlin.jks'
      key_store_password: 'password'
      # cacert.pem is required only if you use self-signed certificate
      ca: '/opt/ca/certs/cacert.pem'
```

The elasticsearch transport client user has to have the following shield role:

```yml
transport_client:
  cluster:
      - cluster:monitor/nodes/liveness
  indices:
    '*':
      privileges: indices:data/read/get, indices:data/read/mget, indices:data/read/search
```

NOTE: For detailed instructions on how to create the gremlin.jks and signed certificate,
please follow the https://www.elastic.co/guide/en/shield/2.2/ssl-tls.html[Shield documentation]
or contact us at mailto:info@siren.solutions[info@siren.solutions]


=== Log4J File Configuration Path:

**Log4J** configuration file is optional for the Gremlin server. If you want to use your own custom configuration, you can specify the path to your file with the `kibi_core.gremlin_server.log_conf_path` parameter inside your _kibi.yml_ file.
Here is an example of how to configure the _log4j.properties_ file for your Gremlin server:
```properties
# For the general syntax of property based configuration files see
# the documentation of org.apache.log4j.PropertyConfigurator.

# The root category uses two appenders: A1 and FILE.
# Both gather all log output starting with the priority INFO.
log4j.rootLogger=INFO, A1, FILE

log4j.appender.A1=org.apache.log4j.ConsoleAppender
log4j.appender.A1.layout=org.apache.log4j.PatternLayout
log4j.appender.A1.threshold=INFO
# Print the date in ISO 8601 format
log4j.appender.A1.layout.ConversionPattern=%d [%t] %-5p %c - %m%n

log4j.appender.FILE=org.apache.log4j.FileAppender
log4j.appender.FILE.append=true
log4j.appender.FILE.file=log/gremlin-server.log
log4j.appender.FILE.threshold=INFO
log4j.appender.FILE.layout=org.apache.log4j.PatternLayout
log4j.appender.FILE.layout.ConversionPattern=%-5p %c: %m%n


# Print only messages of level WARN or above in the package org.springframework
log4j.logger.org.springframework=WARN
```
endif::[]
