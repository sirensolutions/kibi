[[settings]]
== Settings

[[kbn-settings-indices]]
=== Indices

To use Kibi, you have to tell it about the Elasticsearch indices that you
want to explore by configuring one or more index patterns. You can also:

* Create scripted fields that are computed on the fly from your data. You can
browse and visualize scripted fields, but you cannot search them.
* Set advanced options such as the number of rows to show in a table and
how many of the most popular fields to show. Use caution when modifying advanced options,
as it's possible to set values that are incompatible with one another.
* Configure Kibi for a production environment

[float]
[[settings-create-pattern]]
=== Creating an Index Pattern to Connect to Elasticsearch
An _index pattern_ identifies one or more Elasticsearch indices that you want to explore with Kibi. Kibi looks for
index names that match the specified pattern.
An asterisk (*) in the pattern matches zero or more characters. For example, the pattern `myindex-*` matches all
indices whose names start with `myindex-`, such as `myindex-1` and `myindex-2`.

An index pattern can also simply be the name of a single index.

To create an index pattern to connect to Elasticsearch:

. Go to the *Settings > Indices* tab.
. Specify an index pattern that matches the name of one or more of your Elasticsearch
indices. By default, Kibi guesses that you're you're working with log data being
fed into Elasticsearch by Logstash.
+
NOTE: When you switch between top-level tabs, Kibi remembers where you were.
For example, if you view a particular index pattern from the Settings tab, switch
to the Discover tab, and then go back to the Settings tab, Kibi displays the
index pattern you last looked at. To get to the create pattern form, click
the *Add* button in the Index Patterns list.

. If your index contains a timestamp field that you want to use to perform time-based comparisons, select the *Index
contains time-based events* option and select the index field that contains the timestamp. Kibi reads the index
mapping to list all of the fields that contain a timestamp.

. By default, Kibi restricts wildcard expansion of time-based index patterns to indices with data within the currently
selected time range. Click *Do not expand index pattern when search* to disable this behavior.

. Click *Create* to add the index pattern.

. To designate the new pattern as the default pattern to load when you view the Discover tab, click the *favorite*
button.

NOTE: When you define an index pattern, indices that match that pattern must exist in Elasticsearch. Those indices must
contain data.

To use an event time in an index name, enclose the static text in the pattern and specify the date format using the
tokens described in the following table.

For example, `[logstash-]YYYY.MM.DD` matches all indices whose names have a timestamp of the form `YYYY.MM.DD` appended
to the prefix `logstash-`, such as `logstash-2015.01.31` and `logstash-2015-02-01`.

[float]
[[date-format-tokens]]
.Date Format Tokens
[horizontal]
`M`::	Month - cardinal: 1 2 3 ... 12
`Mo`:: Month - ordinal:	1st 2nd 3rd ... 12th
`MM`:: Month - two digit: 	01 02 03 ... 12
`MMM`:: Month - abbreviation: Jan Feb Mar ... Dec
`MMMM`:: Month - full: January February March ... December
`Q`::	Quarter: 1 2 3 4
`D`::	Day of Month - cardinal: 1 2 3 ... 31
`Do`:: Day of Month - ordinal: 1st 2nd 3rd ... 31st
`DD`:: Day of Month - two digit:	01 02 03 ... 31
`DDD`:: Day of Year - cardinal: 1 2 3 ... 365
`DDDo`:: Day of Year - ordinal:	1st 2nd 3rd ... 365th
`DDDD`:: Day of Year - three digit: 001 002 ... 364 365
`d`::	Day of Week - cardinal: 0 1 3 ... 6
`do`:: Day of Week - ordinal:	0th 1st 2nd ... 6th
`dd`:: Day of Week - 2-letter abbreviation:	Su Mo Tu ... Sa
`ddd`:: Day of Week - 3-letter abbreviation: Sun Mon Tue ... Sat
`dddd`:: Day of Week - full: Sunday Monday Tuesday ... Saturday
`e`::	Day of Week (locale): 0 1 2 ... 6
`E`::	Day of Week (ISO): 1 2 3 ... 7
`w`::	Week of Year - cardinal (locale): 1 2 3 ... 53
`wo`:: Week of Year - ordinal (locale): 1st 2nd 3rd ... 53rd
`ww`:: Week of Year - 2-digit (locale): 01 02 03 ... 53
`W`::	Week of Year - cardinal (ISO): 1 2 3 ... 53
`Wo`:: Week of Year - ordinal (ISO): 1st 2nd 3rd ... 53rd
`WW`:: Week of Year - two-digit (ISO): 01 02 03 ... 53
`YY`:: Year - two digit:	70 71 72 ... 30
`YYYY`:: Year - four digit: 1970 1971 1972 ... 2030
`gg`:: Week Year - two digit (locale):	70 71 72 ... 30
`gggg`:: Week Year - four digit (locale):	1970 1971 1972 ... 2030
`GG`:: Week Year - two digit (ISO):	70 71 72 ... 30
`GGGG`::	Week Year - four digit (ISO): 1970 1971 1972 ... 2030
`A`::	AM/PM: AM PM
`a`::	am/pm: am pm
`H`::	Hour: 0 1 2 ... 23
`HH`:: Hour - two digit: 00 01 02 ... 23
`h`::	Hour - 12-hour clock: 1 2 3 ... 12
`hh`:: Hour - 12-hour clock, 2 digit:	01 02 03 ... 12
`m`::	Minute: 0 1 2 ... 59
`mm`:: Minute - two-digit:	00 01 02 ... 59
`s`::	Second: 0 1 2 ...  59
`ss`:: Second - two-digit: 00 01 02 ... 59
`S`::	Fractional Second - 10ths: 0 1 2 ... 9
`SS`:: Fractional Second - 100ths: 	0 1 ... 98 99
`SSS`:: Fractional Seconds - 1000ths:	0 1 ... 998 999
`Z`::	Timezone - zero UTC offset (hh:mm format): -07:00 -06:00 -05:00 .. +07:00
`ZZ`:: Timezone - zero UTC offset (hhmm format):	-0700 -0600 -0500 ... +0700
`X`:: Unix Timestamp:	1360013296
`x`::	Unix Millisecond Timestamp: 1360013296123

[float]
[[set-default-pattern]]
=== Setting the Default Index Pattern
The default index pattern is loaded by automatically when you view the *Discover* tab.
Kibi displays a star to the left of the name of the default pattern in the Index Patterns list
on the *Settings > Indices* tab. The first pattern you create is automatically
designated as the default pattern.

To set a different pattern as the default index pattern:

. Go to the *Settings > Indices* tab.
. Select the pattern you want to set as the default in the Index Patterns list.
. Click the pattern's *Favorite* button.

NOTE: You can also manually set the default index pattern in <<advanced_settings,advanced settings>>.

[float]
[[reload-fields]]
=== Reloading the Index Fields List
When you add an index mapping, Kibi automatically scans the indices that
match the pattern to display a list of the index fields. You can reload the
index fields list to pick up any newly-added fields.

Reloading the index fields list also resets Kibi's popularity counters for the fields.
The popularity counters keep track of the fields you've used most often within Kibi
and are used to sort fields within lists.

To reload the index fields list:

. Go to the *Settings > Indices* tab.
. Select an index pattern from the Index Patterns list.
. Click the pattern's *Reload* button.

[float]
[[delete-pattern]]
=== Deleting an Index Pattern
To delete an index pattern:

. Go to the *Settings > Indices* tab.
. Select the pattern you want to remove in the Index Patterns list.
. Click the pattern's *Delete* button.
. Confirm that you want to remove the index pattern.

[float]
[[managing-fields]]
=== Managing Fields
The fields for the index pattern are listed in a table. Click a column header to sort the table by that column. Click
the *Controls* button in the rightmost column for a given field to edit the field's properties. You can manually set
the field's format from the *Format* drop-down. Format options vary based on the field's type.

You can also set the field's popularity value in the *Popularity* text entry box to any desired value. Click the
*Update Field* button to confirm your changes or *Cancel* to return to the list of fields.

Kibi has https://www.elastic.co/blog/kibana-4-1-field-formatters[field formatters] for the following field types:

==== String Field Formatters

String fields support the `String` and `Url` formatters.

include::string_formatter.asciidoc[]

include::url_formatter.asciidoc[]

==== Date Field Formatters

Date fields support the `Date`, `Url`, and `String` formatters.

The `Date` formatter enables you to choose the display format of date stamps using the http://moment.js[moment.js]
standard format definitions.

include::string_formatter.asciidoc[]

include::url_formatter.asciidoc[]

==== Geographic Point Field Formatters

Geographic point fields support the `String` formatter.

include::string_formatter.asciidoc[]

==== Numeric Field Formatters

Numeric fields support the `Url`, `String`, `Bytes`, `Number`, `Percentage`, and `Color` formatters.

include::string_formatter.asciidoc[]

include::url_formatter.asciidoc[]

include::color_formatter.asciidoc[]

The `Bytes`, `Number`, and `Percentage` formatters enable you to choose the display formats of numbers in this field using
the https://adamwdraper.github.io/Numeral-js/[numeral.js] standard format definitions.

[float]
[[create-scripted-field]]
=== Creating a Scripted Field
Scripted fields compute data on the fly from the data in your Elasticsearch indices. Scripted field data is shown on
the Discover tab as part of the document data, and you can use scripted fields in your visualizations.
Scripted field values are computed at query time so they aren't indexed and cannot be searched.

NOTE: Kibana cannot query scripted fields.

WARNING: Computing data on the fly with scripted fields can be very resource intensive and can have a direct impact on
Kibi's performance. Keep in mind that there's no built-in validation of a scripted field. If your scripts are
buggy, you'll get exceptions whenever you try to view the dynamically generated data.

Scripted fields use the Lucene expression syntax. For more information,
see {elastic-ref}/modules-scripting.html#_lucene_expressions_scripts[
Lucene Expressions Scripts].

You can reference any single value numeric field in your expressions, for example:

----
doc['field_name'].value
----

To create a scripted field:

. Go to *Settings > Indices*
. Select the index pattern you want to add a scripted field to.
. Go to the pattern's *Scripted Fields* tab.
. Click *Add Scripted Field*.
. Enter a name for the scripted field.
. Enter the expression that you want to use to compute a value on the fly from your index data.
. Click *Save Scripted Field*.

For more information about scripted fields in Elasticsearch, see
{elastic-ref}/modules-scripting.html[Scripting].

NOTE: In Elasticsearch releases 1.4.3 and later, this functionality requires you to enable
{elastic-ref}modules-scripting.html[dynamic Groovy scripting].

[float]
[[update-scripted-field]]
=== Updating a Scripted Field
To modify a scripted field:

. Go to *Settings > Indices*
. Click the *Edit* button for the scripted field you want to change.
. Make your changes and then click *Save Scripted Field* to update the field.

WARNING: Keep in mind that there's no built-in validation of a scripted field. If your scripts are buggy, you'll get
exceptions whenever you try to view the dynamically generated data.

[float]
[[delete-scripted-field]]
=== Deleting a Scripted Field
To delete a scripted field:

. Go to *Settings > Indices*
. Click the *Delete* button for the scripted field you want to remove.
. Confirm that you really want to delete the field.

[float]
[[kibi-source-filtering]]
=== Source Filtering

Some index fields are useful for filtering or aggregation purposes,
but are not used in visualizations like the <<enhanced_search_results>>.

In addition, they can negatively impact on the performance of the application
if they contain large amounts of data, creating additional network traffic.

The {elastic-ref}search-request-source-filtering.html[Source filtering API] of Elasticsearch
allows to control which fields are included in the response.

Source filtering can be configured in the index pattern page by clicking on
the _Retrieved fields_ tab.

image::images/source_filtering/index_view.png["Index view",align="center"]

Any visualisation based on the index pattern will receive a filtered response.

Filtering rules can be configured by writing a JSON object to the
configuration form.

The JSON object can contain two attributes, `exclude` and `include`, as
explained in the https://www.elastic.co/guide/en/elasticsearch/reference/master/search-request-source-filtering.html[Source filtering API].

The screenshot below displays a filtering configuration that excludes the
`_snippet_` field from the `_source`.

image::images/source_filtering/config.png["Source filtering configuration",align="center"]

The column _retrieved_ in the _Fields_ tab specifies if the values associated
with a field should be retrieved or not according to the filtering rules.

[[kibi-settings-relations]]
=== Relations

In this panel, you can define relationships between index patterns. These relationships ultimately form a **graph** of index patterns. This graph is used in conjunction with the Siren 2.0 plugin; this allows to perform join operations between **dashboards**, i.e., filtering a dashboard's documents with regards to an other.

==== Graph of Index Patterns

A relationship is defined as a **join** operation between two indices with the following fields:

- _Left Index Pattern_: the left index of the join;
- _Left Type_: the type of the left index of the join;
- _Left Field_: the field of the left index to join on;
- _Right Index Pattern_: the right index of the join;
- _Right Type_: the type of the right index of the join;
- _Right Field_: the field of the right index to join with; and
- _Label_: the label of the relation.

The image below displays a graph of four index patterns, where three relationships have defined. You can add a new relationship by clicking on the "_Add relation_" button.

image::images/relations_settings/indices_settings.png["Graph of Index Patterns",align="center"]

A relation is also indicated on the <<kbn-settings-indices,Indices>> tab thanks to the icon image:images/relations_settings/index_relation_icon.png["Index relation icon"].
If you hover the mouse over it, a tooltip message is displayed indicating the index pattern and field that field is joined with.

For example, in the image below, that icon is displayed next to the field "id" of the "investor" index, which is join with the field "investorid" of the "investment" index.

image::images/relations_settings/investor_index.png["Investor Index",align="center"]

===== Advanced settings for index relations [Enterprise Edition only]

ifeval::["{enterprise_enabled}" == "false"]
  NOTE: Documentation for Advanced settings for index relations is available only in Kibi Enterprise Edition.
endif::[]

ifeval::["{enterprise_enabled}" == "true"]

In most cases the default index relation settings are sufficient.
However, for scenarios involving very large joins or when precision is critical,
it is necessary to manually specify the settings.
One can do it by clicking on the button marked below.

image::images/relations_settings/indices_settings_advanced_switch.png["Advanced index relation settings switch",align="center"]

An additional settings panel will open

image::images/relations_settings/indices_settings_advanced.png["Advanced index relation settings switch",align="center"]

On this panel, the user can manually configure the following parameters for each relation:

- **Order By** - (String: "default" or "doc_score", Default: default)
  The ordering to use to lookup the maximum number of terms
- **Number of Terms per Shard** - (Integer: >= -1, Default: -1)
  The maximum number of terms per shard to lookup, -1 means no limit.
- **Terms Encoding** - (String: "long" or "integer" or "bloom", Default: long)
  The encoding to use when transferring terms across the network

By setting the above parameters, one can optimise the precision and the performance of the join operation.

NOTE: Advanced Join Settings are available only in Kibi Enterprise. Free Kibi version always use the default values for all advanced parameters.

endif::[]

==== Graph of Dashboards

Based on the graph of index patterns, one can define relationships between dashboards, since a dashboard may be associated with a <<saving-dashboards,saved search>>.

A relationship between dashboards is defined with the following parameters

- _Left Dashboard_ and _Right Dashboard_: the dashboards to be linked; and
- _Relation_: the relation that connects the two dashboards; it is the label of a relation previously defined.

For example, the image below shows a graph of five dashboards:

+++
<style>
.small-circle{
  border-radius: 50%;
  width: 20px;
  height: 20px;
  display: inline-block;
}
</style>
+++

1. the dashboard "Articles" with a saved search associated to the index "article" depicted with the circle +++<span class="small-circle" style="background-color: #57c17b;"></span>+++;
2. the dashboard "Articles detailed per source" with a saved search associated to the index "article" depicted with the circle +++<span class="small-circle" style="background-color: #57c17b;"></span>+++;
3. the dashboard "Companies" with a saved search associated to the index "company" depicted with the circle +++<span class="small-circle" style="background-color: #006e8a;"></span>+++;
4. the dashboard "Investments" with a saved search associated to the index "investment" depicted with the circle +++<span class="small-circle" style="background-color: #6f87d8;"></span>+++; and
5. the dashboard "Investors" with a saved search associated to the index "investor" depicted with the circle +++<span class="small-circle" style="background-color: #663db8;"></span>+++.

Such relationships between dashboards are defined on the right side of the panel, as shown in the image below.

image::images/relations_settings/dashboards_settings.png["Graph of Dashboards",align="center"]

===== Enabling Relations

A relation between two dashboard can be enabled or disabled. If it is enabled, the documents are filtered based on that relation.
You can disable/enable a relation by checking the box on an edge of the graph.

In the previous image, the AC and CI relations between the dashboards Articles, Companies, and Investments are enabled. This means that filtering documents from the Articles will retain only the Companies, and Investments, that are connected to those articles.

[[relations-settings-enable]]
==== Enabling Relational Panel

By checking the "Enable relational panel" checkbox, the relationships that you defined between dashboards will be made effective while browsing.
The relational panel can be opened by clicking on the icon image:images/relations_settings/relational_panel_icon.png["Relational panel icon"] in the Dashboard tab.

With relations between dashboards enabled in the previous example, you will see the "relational" filter image:images/relations_settings/relational_filter.png["Relational filter"] displayed on the dashboards Articles, Companies, and Investments.


[[kibi-settings-datasources]]
=== Datasources

For an overview of datasources, please read the <<external_datasources>>
chapter.


[[kibi-settings_queries]]
=== Queries

For an overview of queries, please read the <<external_datasources>>
chapter.


[[kibi-settings-templates]]
=== Query Templates

For an overview of query templates, please read the <<external_datasources>>
chapter.


[[kibi-settings-dashboards-groups]]
=== Dashboard Groups

Dashboard groups can be managed through the **Dashboard Groups** tab.

You can create a new group by clicking on the **New Dashboard Group** image:images/NewVis.png[New]
button, save it with the **Save Dashboard Group** image:images/SaveVis.png[Save] button,
or load an existing one with the **Load Dashboard Group** image:images/LoadVis.png[Load] button.

You can set the following parameters for a dashboard group:

- _Title_: the title of the group, displayed on the tab.
- _Description_: an optional description of the group.
- _Priority_: a number that determines the position of the tab.
- _Icon URL_/_Icon CSS class_: allows to set the icon displayed in the tab
either as a PNG image or a CSS font class; Kibi includes the
https://fortawesome.github.io/Font-Awesome/[Font Awesome] toolkit.

[[advanced_settings]]
=== Advanced
The Advanced Settings page enables you to directly edit settings that control
the behavior of the Kibi application. For example, you can change the format
used to display dates, specify the default index pattern, and set the precision
for displayed decimal values.

WARNING: Changing advanced settings can have unintended consequences. If you aren't
sure what you're doing, it's best to leave these settings as-is.

To set advanced settings:

. Go to *Settings > Advanced*.
. Click the *Edit* button for the option you want to modify.
. Enter a new value for the option.
. Click the *Save* button.

==== Query string options

You can set the default options used when performing a {elastic-ref}query-dsl-query-string-query.html[query_string] query thanks to the advanced option _query:queryString:options_.

include::advanced_settings.asciidoc[]

[[kibana-server-properties]]
=== Setting Kibi Server Properties

The Kibi server reads properties from the `kibi.yml` file on startup. The default settings configure Kibana to listen on port
`{kibi-default-port}` on all the IP addresses. To change the host or port number, or connect to Elasticsearch running on a different
machine, you'll need to update your `kibi.yml` file. You can also enable SSL and set a variety of other options.

deprecated[4.2, The names of several Kibana server properties changed in the 4.2 release of Kibana. The previous names remain as functional aliases, but are now deprecated and will be removed in a future release of Kibana]

[horizontal]
.Kibana Server Properties Changed in the 4.2 Release
`server.port` added[4.2]:: The port that the Kibana server runs on.
+
*alias*: `port` deprecated[4.2]
+
*default*: `{kibi-default-port}`

`server.host` added[4.2]:: The host to bind the Kibana server to.
+
*alias*: `host` deprecated[4.2]
+
*default*: `"0.0.0.0"`

`elasticsearch.url` added[4.2]:: The Elasticsearch instance where the indices you want to query reside.
+
*alias*: `elasticsearch_url` deprecated[4.2]
+
*default*: `"http://localhost:9200"`

`elasticsearch.preserveHost` added[4.2]:: By default, the host specified in the incoming request from the browser is specified as the host in the corresponding request Kibana sends to Elasticsearch. If you set this option to `false`, Kibana uses the host specified in `elasticsearch_url`.
+
*alias*: `elasticsearch_preserve_host` deprecated[4.2]
+
*default*: `true`

`elasticsearch.ssl.cert` added[4.2]:: This parameter specifies the path to the SSL certificate for Elasticsearch instances that require a client certificate.
+
*alias*: `kibana_elasticsearch_client_crt` deprecated[4.2]

`elasticsearch.ssl.key` added[4.2]:: This parameter specifies the path to the SSL key for Elasticsearch instances that require a client key.
+
*alias*: `kibana_elasticsearch_client_key` deprecated[4.2]

`elasticsearch.password` added[4.2]:: This parameter specifies the password for Elasticsearch instances that use HTTP basic authentication. Kibana users still need to authenticate with Elasticsearch, which is proxied through the Kibana server.
+
*alias*: `kibana_elasticsearch_password` deprecated[4.2]

`elasticsearch.username` added[4.2]:: This parameter specifies the username for Elasticsearch instances that use HTTP basic authentication. Kibana users still need to authenticate with Elasticsearch, which is proxied through the Kibana server.
+
*alias*: `kibana_elasticsearch_username` deprecated[4.2]

`elasticsearch.pingTimeout` added[4.2]:: This parameter specifies the maximum wait time in milliseconds for ping responses by Elasticsearch.
+
*alias*: `ping_timeout` deprecated[4.2]
+
*default*: `1500`

`elasticsearch.startupTimeout` added[4.2]:: This parameter specifies the maximum wait time in milliseconds for Elasticsearch discovery at Kibana startup. Kibana repeats attempts to discover an Elasticsearch cluster after the specified time elapses.
+
*alias*: `startup_timeout` deprecated[4.2]
+
*default*: `5000`

`kibana.index` added[4.2]:: The name of the index where saved searched, visualizations, and dashboards will be stored..
+
*alias*: `kibana_index` deprecated[4.2]
+
*default*: `.kibana`

`kibana.defaultAppId` added[4.2]:: The page that will be displayed when you launch Kibana: `discover`, `visualize`, `dashboard`, or `settings`.
+
*alias*: `default_app_id` deprecated[4.2]
+
*default*: `"discover"`

`logging.silent` added[4.2]:: Set this value to `true` to suppress all logging output.
+
*default*: `false`

`logging.quiet` added[4.2]:: Set this value to `true` to suppress all logging output except for log messages tagged `error`, `fatal`, or Hapi.js errors.
+
*default*: `false`

`logging.verbose` added[4.2]:: Set this value to `true` to log all events, including system usage information and all requests.
+
*default*: `false`

`logging.events` added[4.2]:: You can specify a map of log types to output tags for this parameter to create a customized set of loggable events, as in the following example:
+
[source,json]
{
  log: ['info', 'warning', 'error', 'fatal'],
  response: '*',
  error: '*'
}

`elasticsearch.requestTimeout` added[4.2]:: How long to wait for responses from the Kibana backend or Elasticsearch, in milliseconds.
+
*alias*: `request_timeout` deprecated[4.2]
+
*default*: `500000`

`elasticsearch.shardTimeout` added[4.2]:: How long Elasticsearch should wait for responses from shards. Set to 0 to disable.
+
*alias*: `shard_timeout` deprecated[4.2]
+
*default*: `0`

`elasticsearch.ssl.verify` added[4.2]:: Indicates whether or not to validate the Elasticsearch SSL certificate. Set to false to disable SSL verification.
+
*alias*: `verify_ssl` deprecated[4.2]
+
*default*: `true`

`elasticsearch.ssl.ca`:: An array of paths to the CA certificates for your Elasticsearch instance. Specify if
you are using a self-signed certificate so the certificate can be verified. Disable `elasticsearch.ssl.verify` otherwise.
+
*alias*: `ca` deprecated[4.2]

`server.ssl.key` added[4.2]:: The path to your Kibana server's key file. Must be set to encrypt communications between the browser and Kibana.
+
*alias*: `ssl_key_file` deprecated[4.2]

`server.ssl.cert` added[4.2]:: The path to your Kibana server's certificate file. Must be set to encrypt communications between the browser and Kibana.
+
*alias*: `ssl_cert_file` deprecated[4.2]

`pid.file` added[4.2]:: The location where you want to store the process ID file.
+
*alias*: `pid_file` deprecated[4.2]
+
*default*: `/var/run/kibana.pid`

`logging.dest` added[4.2]:: The location where you want to store the Kibana's log output. If not specified, log output is written to standard output and not stored. Specifying a log file suppresses log writes to standard output.
+
*alias*: `log_file` deprecated[4.2]

[[managing-saved-objects]]
== Managing Saved Searches, Visualizations, and Dashboards

You can view, edit, and delete saved searches, visualizations, and dashboards from *Settings > Objects*. You can also:
* export or import sets of objects (searches, visualizations, dashboards, etc.) by using "Export" button
* export all objects plus configuration, and index-patterns by using "Export Everything" button

Viewing a saved object displays the selected item in the *Discover*, *Visualize*, or *Dashboard* page. To view a saved
object:

. Go to *Settings > Objects*.
. Select the object you want to view.
. Click the *View* button.

Editing a saved object enables you to directly modify the object definition. You can change the name of the object, add
a description, and modify the JSON that defines the object's properties.

If you attempt to access an object whose index has been deleted, Kibana displays its Edit Object page. You can:

* Recreate the index so you can continue using the object.
* Delete the object and recreate it using a different index.
* Change the index name referenced in the object's `kibanaSavedObjectMeta.searchSourceJSON` to point to an existing
index pattern. This is useful if the index you were working with has been renamed.

WARNING: No validation is performed for object properties. Submitting invalid changes will render the object unusable.
Generally, you should use the *Discover*, *Visualize*, or *Dashboard* pages to create new objects instead of directly
editing existing ones.

To edit a saved object:

. Go to *Settings > Objects*.
. Select the object you want to edit.
. Click the *Edit* button.
. Make your changes to the object definition.
. Click the *Save Object* button.

To delete a saved object:

. Go to *Settings > Objects*.
. Select the object you want to delete.
. Click the *Delete* button.
. Confirm that you really want to delete the object.

To export a set of objects:

. Go to *Settings > Objects*.
. Select the type of object you want to export. You can export a set of objects (searches, visualizations, dashboards, etc) by using "Export" button
  or you can export all objects plus configuration, and index-patterns by using "Export Everything" button.
. Click the selection box for the objects you want to export, or click the *Select All* box.
. Click *Export* to select a location to write the exported JSON.

IMPORTANT: If you need to export every object you have in your Kibi installation, you can use "Export Everything" button.

WARNING: Exported dashboards do not include their associated index patterns (not "Export Everything" button). Re-create the index patterns manually before
importing saved dashboards to a Kibana instance running on another Elasticsearch cluster.

To import a set of objects:

. Go to *Settings > Objects*.
. Click *Import* to navigate to the JSON file representing the set of objects to import.
. Click *Open* after selecting the JSON file.
. If any objects in the set would overwrite objects already present in Kibi, confirm the overwrite.

[[Kibi-server-configuration]]
=== Kibi server configuration

The Kibi server reads its configuration from the `config/kibi.yml` file at startup.
The default settings configure Kibi to run on `{start-url}`. To change the host or port number, or connect to Elasticsearch running on a different machine,
you'll need to update your `kibi.yml` file. You can also enable SSL and set a variety of other options.

.Environment variable placeholders

It is possible to use environment variable placeholders in configuration
settings; the syntax of placeholders is `${ENV_VARIABLE_NAME}`.

For example, to set `elasticsearch.url` to the value of the environment
variable `ES_URL`, edit `config_kibi.yml` as follows:

[source,yaml]
----
elasticsearch.url: ${ES_URL}
----

include::kibi_yml.asciidoc[]

External datasource configuration is documented in the <<external_datasources>> chapter.

deprecated[0.3, The names of several Kibi server properties changed in the 0.3 release of Kibana. The previous names remain as functional aliases, but are now deprecated and will be removed in a future release of Kibi]

[horizontal]
.Kibi Server Properties Changed in the 0.3 Release
`server.port` added[0.3]:: The port that the Kibana server runs on.
+
*alias*: `port` deprecated[0.3]
+
*default*: `{kibi-default-port}`

`server.host` added[0.3]:: The host to bind the Kibana server to.
+
*alias*: `host` deprecated[0.3]
+
*default*: `"0.0.0.0"`

`elasticsearch.url` added[0.3]:: The Elasticsearch instance where the indices you want to query reside.
+
*alias*: `elasticsearch_url` deprecated[0.3]
+
*default*: `"http://localhost:9200"`

`elasticsearch.preserveHost` added[0.3]:: By default, the host specified in the incoming request from the browser is specified as the host in the corresponding request Kibana sends to Elasticsearch. If you set this option to `false`, Kibana uses the host specified in `elasticsearch_url`.
+
*alias*: `elasticsearch_preserve_host` deprecated[0.3]
+
*default*: `true`

`elasticsearch.ssl.cert` added[0.3]:: This parameter specifies the path to the SSL certificate for Elasticsearch instances that require a client certificate.
+
*alias*: `kibana_elasticsearch_client_crt` deprecated[0.3]

`elasticsearch.ssl.key` added[0.3]:: This parameter specifies the path to the SSL key for Elasticsearch instances that require a client key.
+
*alias*: `kibana_elasticsearch_client_key` deprecated[0.3]

`elasticsearch.password` added[0.3]:: This parameter specifies the password for Elasticsearch instances that use HTTP basic authentication. Kibana users still need to authenticate with Elasticsearch, which is proxied through the Kibana server.
+
*alias*: `kibana_elasticsearch_password` deprecated[0.3]

`elasticsearch.username` added[0.3]:: This parameter specifies the username for Elasticsearch instances that use HTTP basic authentication. Kibana users still need to authenticate with Elasticsearch, which is proxied through the Kibana server.
+
*alias*: `kibana_elasticsearch_username` deprecated[0.3]

`elasticsearch.pingTimeout` added[0.3]:: This parameter specifies the maximum wait time in milliseconds for ping responses by Elasticsearch.
+
*alias*: `ping_timeout` deprecated[0.3]
+
*default*: `1500`

`elasticsearch.startupTimeout` added[0.3]:: This parameter specifies the maximum wait time in milliseconds for Elasticsearch discovery at Kibana startup. Kibana repeats attempts to discover an Elasticsearch cluster after the specified time elapses.
+
*alias*: `startup_timeout` deprecated[0.3]
+
*default*: `5000`

`kibana.index` added[0.3]:: The name of the index where saved searched, visualizations, and dashboards will be stored..
+
*alias*: `kibana_index` deprecated[0.3]
+
*default*: `.kibana`

`kibana.defaultAppId` added[0.3]:: The page that will be displayed when you launch Kibana: `discover`, `visualize`, `dashboard`, or `settings`.
+
*alias*: `default_app_id` deprecated[0.3]
+
*default*: `"discover"`

`logging.silent` added[0.3]:: Set this value to `true` to suppress all logging output.
+
*default*: `false`

`logging.quiet` added[0.3]:: Set this value to `true` to suppress all logging output except for log messages tagged `error`, `fatal`, or Hapi.js errors.
+
*default*: `false`

`logging.verbose` added[0.3]:: Set this value to `true` to log all events, including system usage information and all requests.
+
*default*: `false`

`logging.events` added[0.3]:: You can specify a map of log types to output tags for this parameter to create a customized set of loggable events, as in the following example:
+
[source,json]
{
  log: ['info', 'warning', 'error', 'fatal'],
  response: '*',
  error: '*'
}

`elasticsearch.requestTimeout` added[0.3]:: How long to wait for responses from the Kibana backend or Elasticsearch, in milliseconds.
+
*alias*: `request_timeout` deprecated[0.3]
+
*default*: `500000`

`elasticsearch.shardTimeout` added[0.3]:: How long Elasticsearch should wait for responses from shards. Set to 0 to disable.
+
*alias*: `shard_timeout` deprecated[0.3]
+
*default*: `0`

`elasticsearch.ssl.verify` added[0.3]:: Indicates whether or not to validate the Elasticsearch SSL certificate. Set to false to disable SSL verification.
+
*alias*: `verify_ssl` deprecated[0.3]
+
*default*: `true`

`elasticsearch.ssl.ca`:: An array of paths to the CA certificates for your Elasticsearch instance. Specify if
you are using a self-signed certificate so the certificate can be verified. Disable `elasticsearch.ssl.verify` otherwise.
+
*alias*: `ca` deprecated[0.3]

`server.ssl.key` added[0.3]:: The path to your Kibana server's key file. Must be set to encrypt communications between the browser and Kibana.
+
*alias*: `ssl_key_file` deprecated[0.3]

`server.ssl.cert` added[0.3]:: The path to your Kibana server's certificate file. Must be set to encrypt communications between the browser and Kibana.
+
*alias*: `ssl_cert_file` deprecated[0.3]

`pid.file` added[0.3]:: The location where you want to store the process ID file.
+
*alias*: `pid_file` deprecated[0.3]
+
*default*: `/var/run/kibana.pid`

`logging.dest` added[0.3]:: The location where you want to store the Kibana's log output. If not specified, log output is written to standard output and not stored. Specifying a log file suppresses log writes to standard output.
+
*alias*: `log_file` deprecated[0.3]
